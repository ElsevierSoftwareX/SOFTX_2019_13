%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Template to create new modules in MaterialModeler
% Tim Benkert
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% This function ...
%
% [out] = templateModulesMaterialModeler(inp, varargin)
% 
% 
% Input Values
% ============
% inp
% Is the database structure generated by database.m
% 
% varargin
% Define input as name value pairs.
% 
% value1 (numeric)
% Description ...
% Default: 10
% [out] = templateModulesMaterialModeler(inp, 'value1', 20);
%
% value2 (logical)
% Description ...
% Default: false
% [out] = templateModulesMaterialModeler(inp, 'value2', 20);
%
% value3 (character)
% Description ...
% Default: 'Hallo'
% [out] = templateModulesMaterialModeler(inp, 'value3', 'Hallo Welt');
%
% Output values
% =============
% Is the database structure generated by database.m.
% Added results are:
% result1 
% result2


function [out] = templateModulesMaterialModeler(inp, varargin)
    %% Check input data
    % Define the input parser
    p = inputParser;
    p.CaseSensitive = true;
    addRequired(p, 'inp', @iscell);
    addParameter(p, 'Value1', defaultValue1, @isnumeric);
    addParameter(p, 'Value2', defaultValue2, @islogical);
    addParameter(p, 'Value3', defaultValue3, @ischar);
    parse(p, inp, varargin{:});
    % Get data out of p
    inp = p.Results.inp;
    value1 = p.Results.Value1;
    value2 = p.Results.Value2;
    value3 = p.Results.Value3;

    % Get variables out of inp
    rows = checkLabels(inp, 'Value4', 'Value5', 'Value6', 'Value7');
    if isempty(rows)
        out = [];
        msgbox('templateModulesMaterialModeler: One of your submitted labes could not be found in input.')
        return;
    end
    value4 = inp{rows(1),2};
    value5 = inp{rows(2),2};

    %% Calculations
    % Whatever your module has to do, put it here

    %% Output
    % set input equal to output
    out = inp;
    % write the calculated results into the database
    out{rows(3),2} = result1;
    out{rows(4),2} = result2;
end